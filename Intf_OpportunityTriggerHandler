/**
 * Created by Michael on 20-03-24.
 */

public with sharing class Intf_OpportunityTriggerHandler {

    private static final String DEFAULT_TRIGGERING_SYNC_STATUS = System.Label.Intf_Default_Oppy_BP_Status_Sync != null ? System.Label.Intf_Default_Oppy_BP_Status_Sync : '4 - Accord de principe';

    public without sharing class sendLikendBPsToSAP implements Intf_Framework_Triggers.Handler {
        public void handle() {

            Map<Id, Opportunity> oldOppies = (Map<Id, Opportunity>)Trigger.oldMap;
            List<Opportunity> b2cOppies = new List<Opportunity>();
            Map<Id, Opportunity> b2bOppies = new Map<Id, Opportunity>();

            for (Opportunity opportunity : (List<Opportunity>)Trigger.new) {
                if (Opportunity.StageName != oldOppies.get(opportunity.Id).StageName && Opportunity.StageName == DEFAULT_TRIGGERING_SYNC_STATUS) {
                    //Need to see if B2C or B2B Opportunity

                    if (opportunity.Contact_B2C__c != null) {
                        //B2C
                        b2cOppies.add(opportunity);

                    } else {
                        //B2B
                        b2bOppies.put(opportunity.Id, opportunity);
                    }
                }
            }

            if (!b2bOppies.isEmpty()) {
                sendB2BLinkedBPs(b2bOppies);
            }
            if (!b2cOppies.isEmpty()) {
                sendB2CLinkedBPs(b2cOppies);
            }
        }
    }

    private static void sendB2BLinkedBPs(Map<Id, Opportunity> oppiesToSend) {

        Set<Id> accountsToSend = new Set<Id>();
        Set<Id> sadIds = new Set<Id>();
        Map<Id, InvolvedStakeholder__c> steakHolderByByAccountIds = new Map<Id, InvolvedStakeholder__c>();
        Map<Id, SalesAreaData__c> sadByIds = new Map<Id, SalesAreaData__c>();
        Map<Id, Id> sadIdsByOppyIds = new Map<Id, Id>();
        Map<Id, Id> oppyIdsByAccountIds = new Map<Id, Id>();
        Map<Id, Account> accountByIds = new Map<Id, Account>();

        for (InvolvedStakeholder__c involvedStakeholder : [SELECT Id, InvolvedAccount__c, Role__c, Opportunity__c, Opportunity__r.SalesAreaData__c FROM InvolvedStakeholder__c WHERE Opportunity__c in :oppiesToSend.keySet()]) {

            accountsToSend.add(involvedStakeholder.InvolvedAccount__c);
            oppyIdsByAccountIds.put(involvedStakeholder.InvolvedAccount__c, involvedStakeholder.Opportunity__c);
            sadIds.add(involvedStakeholder.Opportunity__r.SalesAreaData__c);
            sadIdsByOppyIds.put(involvedStakeholder.Opportunity__c, involvedStakeholder.Opportunity__r.SalesAreaData__c);
            steakHolderByByAccountIds.put(involvedStakeholder.InvolvedAccount__c,  involvedStakeholder);

        }

        sadByIds =  new Map<Id, SalesAreaData__c>([SELECT Id, PFRegion__c, BusinessLine__c, LegalEntityName__c FROM SalesAreaData__c WHERE Id in :sadIds]);
        accountByIds = new Map<Id, Account>([
                SELECT Id, Ligne1__c, Ligne2__c, Ligne3__c, Ligne4__c, Ville__c, CodePostal__c, Province__c, DB_ID_Prefere__c, DB_Valeur_ID_Prefere__c, CurrencyIsoCode,
                        NumeroCompte__c, CategorieCompte__c, NomCommercial__c, DB_Description_activite__c, LangueTravail__c, DB_Email_Contact__c
                FROM Account
                WHERE Id in :accountsToSend
        ]);


        List<Intf_BusinessPartnerSchemaBuilder.BusinessPartnerMsg> bpMessages = new List<Intf_BusinessPartnerSchemaBuilder.BusinessPartnerMsg>();

        for (Id accountId : accountsToSend) {
            Id oppyId = oppyIdsByAccountIds.get(accountId);
            Id sadId = sadIdsByOppyIds.get(oppyId);

            InvolvedStakeholder__c involvedStakeholder = steakHolderByByAccountIds.get(accountId);
            SalesAreaData__c sad = sadByIds.get(sadId);
            Opportunity oppy = oppiesToSend.get(oppyId);

            bpMessages.add(new Intf_BusinessPartnerSchemaBuilder.BusinessPartnerMsg(oppy, accountByIds.get(accountId), involvedStakeholder, sad));
        }

        if (!bpMessages.isEmpty()) {
            Intf_WebserviceCalloutBP intfWebserviceCalloutBP = new Intf_WebserviceCalloutBP();
            intfWebserviceCalloutBP.executeCallout(bpMessages);
        }

    }


    private static void sendB2CLinkedBPs(List<Opportunity> oppiesToSend) {

        Set<Id> b2cContactIds = new Set<Id>();

        for (Opportunity opportunity : oppiesToSend) {
            b2cContactIds.add(opportunity.Contact_B2C__c);
        }

        Map<Id, Contact> contactsById = new Map<Id, Contact>([
                SELECT Salutation, FirstName, LastName, Email, Adresse__c, Adresse_Livraison__c, Ville_Facturation__c, Ville_Livraison__c,
                        Code_Postal_Facturation__c, Code_Postal_Livraison__c
                FROM Contact
                WHERE Id in :b2cContactIds
        ]);

        List<Intf_BusinessPartnerSchemaBuilder.BusinessPartnerMsg> bpMessages = new List<Intf_BusinessPartnerSchemaBuilder.BusinessPartnerMsg>();

        for (Opportunity opportunity : oppiesToSend) {
            bpMessages.add(new Intf_BusinessPartnerSchemaBuilder.BusinessPartnerMsg(opportunity, contactsById.get(opportunity.Contact_B2C__c)));
        }

        if (!bpMessages.isEmpty()) {
            Intf_WebserviceCalloutBP intfWebserviceCalloutBP = new Intf_WebserviceCalloutBP();
            intfWebserviceCalloutBP.executeCallout(bpMessages);
        }

    }

}
