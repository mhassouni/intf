/**
 * Created by Michael on 27-03-24.
 */


public with sharing class Intf_WebserviceCalloutKwote extends Intf_WebserviceCalloutAbstract implements Intf_WebserviceCallout {

    public static Map<String, String> headers;
    private List<String> fieldList = new List<String>{'DB_Valeur_ID_Prefere__c', 'DB_Valeur_Autre__c', 'DB_Valeur_Taxe__c', 'DB_Autre_Identifiant_National__c'};


    private String setInterfaceType() {
        return 'Kwote';
    }

    private String setNamedCredential() {
        return 'Intf_Kwote';
    }

    private String setCaller() {
        return 'Intf_WebserviceCalloutKwote';
    }

    private Boolean setQueueing() {
        return false;
    }

    private Integer setMode() {

        if (System.isBatch() || System.isFuture()) {
            return intf_WebserviceCalloutAbstract.MODE_DIRECT;
        } else {
            return Intf_WebserviceCalloutAbstract.MODE_FUTURE;
        }

    }

    private String setMethod() {
        return 'GET';
    }

    private Map<String, String> setHeaders() {

        return headers;
    }

    private Map<String, String> setTagRemap() {
        return new Map<String, String>();
    }

    public void executeCallout(List<Object> payloadObjects) {

        super.doCallout(payloadObjects);
    }

    public void handleResponse(Intf_ServiceResult serviceResult, String payload, Boolean technicalError) {

        List<KwoteMessage> kwoteMessages = (List<KwoteMessage>)JSON.deserialize(serviceResult.body, List<KwoteMessage>.class);
        System.debug('============================== Intf_WebserviceCalloutKwote handleResponse kwoteMessages#: ' + kwoteMessages.size());

        Map<String, List<SalesAreaData__c>> sadsByIdentifiers = new Map<String, List<SalesAreaData__c>>();
        List<SalesAreaData__c> sadsToUpdate = new List<SalesAreaData__c>();
        Map<String, KwoteMessage> kwoteMessagesByIndentifiantIds = new Map<String, KwoteMessage>();

        String legalEntityPayload = payload.remove('"');
        List<String> legalEntities = legalEntityPayload.split(',');
        System.debug('============================== Intf_WebserviceCalloutKwote handleResponse legalEntityPayload : ' + legalEntityPayload);

        for (KwoteMessage kwoteMessage : kwoteMessages) {
            if (String.isNotBlank(kwoteMessage.identifiantLegal)) {
                kwoteMessagesByIndentifiantIds.put(kwoteMessage.identifiantLegal, kwoteMessage);
            }
        }

        Set<String> legalIdentifiers = kwoteMessagesByIndentifiantIds.keySet();

        for (SalesAreaData__c sad : [
                SELECT Id, LatePayment__c, Account__r.DB_Valeur_ID_Prefere__c, Account__r.DB_Valeur_Autre__c, Account__r.DB_Valeur_Taxe__c, Account__r.DB_Autre_Identifiant_National__c,
                        Encours__c, Score__c
                FROM SalesAreaData__c
                WHERE PFRegion__c in :legalEntities
                AND (Account__r.DB_Valeur_ID_Prefere__c in :legalIdentifiers
                    OR Account__r.DB_Valeur_Autre__c in :legalIdentifiers OR Account__r.DB_Valeur_Taxe__c in :legalIdentifiers OR Account__r.DB_Autre_Identifiant_National__c in :legalIdentifiers)]) {

            Account accountLink = sad.Account__r;
            for (String fieldNameApi :fieldList) {

                String value = (String)accountLink.get(fieldNameApi);
                    if (String.isNotBlank(value)) {
                         if(!sadsByIdentifiers.containsKey(value)) {
                             sadsByIdentifiers.put(value, new List<SalesAreaData__c>());
                         }

                        List<SalesAreaData__c> sads = sadsByIdentifiers.get(value);
                        sads.add(sad);
                    }
            }
        }

        System.debug('============================== Intf_WebserviceCalloutKwote handleResponse salesAreaDatas# : ' + sadsByIdentifiers.size());

        for (String legalIdentifier : sadsByIdentifiers.keySet()) {

            KwoteMessage kwoteMessage = kwoteMessagesByIndentifiantIds.get(legalIdentifier);

            for (SalesAreaData__c sad : sadsByIdentifiers.get(legalIdentifier)) {
                System.debug('============================== Intf_WebserviceCalloutKwote handleResponse added kwoteMessage : ' + kwoteMessage);
                if (!isSameInfo(sad, kwoteMessage)) {
                    sadsToUpdate.add(new SalesAreaData__c(
                            Id = sad.Id,
                            Encours__c = kwoteMessage.enCours,
                            Score__c = kwoteMessage.risque,
                            LatePayment__c = kwoteMessage.retard
                    ));
                }
            }
        }

        System.debug('============================== Intf_WebserviceCalloutKwote handleResponse sadsToUpdate# : ' + sadsToUpdate.size());
        if (!sadsToUpdate.isEmpty()) {
            update sadsToUpdate;
        }
    }

    public void registerMonitoningMessage(String method, String outgoingMessage, String responseMessage, String interfaceName, Integer statusCode, Boolean isError, Boolean isResponse) {

        System.debug('================================ Intf_WebserviceCalloutKwote registerMonitoningMessage method: ' + method);
        System.debug('================================ Intf_WebserviceCalloutKwote registerMonitoningMessage outgoingMessage: ' + outgoingMessage);
        System.debug('================================ Intf_WebserviceCalloutKwote registerMonitoningMessage interfaceName: ' + interfaceName);

        super.registerMonitoningMessage(method, outgoingMessage, responseMessage, interfaceName, statusCode, isError, Intf_GenerallntService.getUMessageId(), isResponse);

    }

    private Boolean isSameInfo(SalesAreaData__c sad, KwoteMessage kwoteMessage) {

        return (sad.Encours__c == kwoteMessage.enCours)
                && (sad.Score__c == kwoteMessage.risque)
                && (sad.LatePayment__c == kwoteMessage.retard);

    }

    private class KwoteMessage {

        Decimal retard { get; set; }
        Decimal enCours { get; set; }
        Decimal risque { get; set; }
        Decimal profilPayeur { get; set; }
        String identifiantLegal { get; set; }

    }

}
