/**
 * Created by Michael on 06-03-24.
 */

public with sharing class Intf_WebserviceCalloutBP extends Intf_WebserviceCalloutAbstract implements Intf_WebserviceCallout {

    private String setInterfaceType() {
        return 'BusinessPartner';
    }

    private String setNamedCredential() {
        return 'Intf_BP_SAP';
    }

    private String setCaller() {
        return 'Intf_WebserviceCalloutBP';
    }

    private Boolean setQueueing() {
        return false;
    }

    private Integer setMode() {

        if (System.isBatch() || System.isFuture()) {
            return intf_WebserviceCalloutAbstract.MODE_DIRECT;
        } else {
            return Intf_WebserviceCalloutAbstract.MODE_FUTURE;
        }

    }

    private String setMethod() {
        return 'POST';
    }

    private Map<String, String> setHeaders() {
        return new Map<String, String>();
    }

    private Map<String, String> setTagRemap() {
        return new Map<String, String>();
    }

    public void executeCallout(List<Object> payloadObjects) {

        super.doCallout(payloadObjects);
    }

    public void handleResponse(Intf_ServiceResult serviceResult, String payload, Boolean technicalError) {

        Map<String, Object> contractMsg = (Map<String, Object>) JSON.deserializeUntyped(payload);
        Map<String, Object> rqstMsg = (Map<String, Object>)contractMsg.get(Intf_WebserviceCalloutService.WORK_ORDER_PROP);
        String workOrderId = (String)rqstMsg.get('salesforceId');

        System.debug('============================== Intf_WebserviceCalloutBP handleResponse contractId: ' + workOrderId);
        System.debug('============================== Intf_WebserviceCalloutBP handleResponse serviceResult: ' + serviceResult);

//        List<WorkOrder> workOdersToUpdate = [SELECT Id, Intf_Sync_Status__c FROM WorkOrder WHERE Id = :workOrderId FOR UPDATE];
//
//        System.debug('============================== Intf_WebserviceCalloutBP handleResponse workOdersToUpdate: ' + workOdersToUpdate);
//
//        if (!workOdersToUpdate.isEmpty() && serviceResult != null) {
//
//            if( technicalError || ((serviceResult.statusCode != 200) && (serviceResult.statusCode != 201))) {
//
//                workOdersToUpdate[0].Intf_Sync_Status__c = Intf_WebserviceCalloutService.TO_BE_FIXED_STATUS;
//                workOdersToUpdate[0].Intf_Synchronisation_Message__c = serviceResult.body;
//
//            } else {
//
//                workOdersToUpdate[0].Intf_Sync_Status__c = Intf_WebserviceCalloutService.SYNC_IN_PROGRESS_STATUS;
//                workOdersToUpdate[0].Intf_Synchronisation_Message__c = null;
//
//            }
//
//            System.debug('============================== Intf_WebserviceCalloutBP handleResponse workOdersToUpdate: ' + workOdersToUpdate);
//            update workOdersToUpdate;
//        }

    }

    public void registerMonitoningMessage(String method, String outgoingMessage, String responseMessage, String interfaceName, Integer statusCode, Boolean isError, Boolean isResponse) {

        Map<String, Object> contractMsg = (Map<String, Object>) JSON.deserializeUntyped(outgoingMessage);
        System.debug('====================== Intf_WebserviceCalloutBP registerMonitoningMessage OUTGOING workorder message: ' + contractMsg);

        Map<String, Object> rqstMsg = (Map<String, Object>)contractMsg.get(Intf_WebserviceCalloutService.WORK_ORDER_PROP);
        String messId = (String)rqstMsg.get('mess_id');

        System.debug('====================== Intf_WebserviceCalloutBP registerMonitoningMessage OUTGOING messId: ' + messId);

        super.registerMonitoningMessage(method, outgoingMessage, responseMessage, interfaceName, statusCode, isError, messId, isResponse);

    }

}
